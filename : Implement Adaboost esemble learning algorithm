class Perceptron:
    def __init__(self, x, y, result, threshold):
        self.x = x  # Input vector
        self.y = y  # Activation result
        self.result = result  # Summation result
        self.threshold = threshold
        self.w = []

    def h(self, weights):
        # Calculate summation hypothesis function
        return [
            sum(weights[j][i] * self.x[j][i] for j in range(len(weights)))
            for i in range(len(self.result))
        ]

    def check_threshold(self, hresult):
        # Hard threshold function technique for regression
        actfun = [1 if val > self.threshold else 0 for val in hresult]
        print("ans:", hresult)
        print("result act fun:", actfun)
        return actfun == self.result

    def training(self, weights, alpha):
        # Training using batch gradient descent learning rule
        for attempt in range(1, 11):
            print(f"Attempt {attempt}")
            hresult = self.h(weights)
            
            if self.check_threshold(hresult):
                self.w = weights
                print(f"In Attempt number {attempt}, I think I have learned enough: w0 -->")
                for idx, weight in enumerate(self.w):
                    print(f"w{idx} -> {weight}")
                break

            # Update weights
            for j in range(len(self.result)):
                for k in range(len(weights)):
                    sum_errors = sum((self.result[j] - hresult[j]) * self.x[n][j] for n in range(len(weights)))
                    weights[k][j] += alpha * sum_errors
        else:
            print("I am exhausted, tried 10 iterations! Please change something else...")

# Example usage
a = [[1,1,1,1],[0,0,1,1],[0,1,0,1]]  # x vector, x0 is dummy
b = [0,1,1,1]
c = [0.5,0.7,1.3,1.5]  # Sample h values
p = Perceptron(a, b, c, 0.5)
print("whether reservation is done =", p.x[0])
print("whether raining outside =", p.x[1])
print("with threshold value =", p.threshold)

r = p.h([[0.5,0.5,0.5,0.5],[0.8,0.8,0.8,0.8],[0.2,0.2,0.2,0.2]])
print("status:", p.check_threshold(r))

print("trying with alpha=0.01 -->")
p.training([[0.7,0.7,0.7,0.7],[0.5,0.5,0.5,0.5],[0.4,0.4,0.4,0.4]], 0.01)

print("trying with alpha=0.5 -->")
p.training([[0.7,0.7,0.7,0.7],[0.5,0.5,0.5,0.5],[0.4,0.4,0.4,0.4]], 0.5)

print("trying with new data -->")
p.training([[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3],[0.5,0.5,0.5,0.5]], 0.01)
